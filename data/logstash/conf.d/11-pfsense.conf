#########################
#10-pfsense.conf
#Note that the timezone (under the date filter) should be updated to match whatever timezone your PFSense time is in.
#Note that the network interface names (i.e. WAN, LAN, TrustedWiFi, GuestWiFi) should be updated to match your network configuration. 
#########################
filter {  
  if "PFSense" in [tags] {
    grok {
      add_tag => [ "firewall" ]
      match => [ "message", "<(?<evtid>.*)>(?<datetime>(?:Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|Oct(?:ober)?|Nov(?:ember)?|Dec(?:ember)?)\s+(?:(?:0[1-9])|(?:[12][0-9])|(?:3[01])|[1-9]) (?:2[0123]|[01]?[0-9]):(?:[0-5][0-9]):(?:[0-5][0-9])) (?<prog>.*?): (?<msg>.*)" ]
    }
    mutate {
      gsub => ["datetime","  "," "]
    }
    date {
      match => [ "datetime", "MMM dd HH:mm:ss" ]
	  timezone => "US/Eastern"
    }
    mutate {
      replace => [ "message", "%{msg}" ]
    }
    mutate {
      remove_field => [ "msg", "datetime" ]
    }

	if [prog] =~ /^filterlog$/ {  
		mutate {
		  remove_field => [ "msg", "datetime" ]      
		}
		grok {
		  patterns_dir => ["/etc/logstash/conf.d/patterns"]
		  match => [ "message", "%{LOG_DATA}%{IP_SPECIFIC_DATA}%{IP_DATA}%{PROTOCOL_DATA}" ]
		}
		mutate {
		  lowercase => [ 'proto' ]
		}
		geoip {
		  add_tag => [ "GeoIP" ]
		  source => "src_ip"
		}
	}

	if [prog] =~ /.*nginx$/ {
		grok {
			 match => { "message" => "%{COMBINEDAPACHELOG}"}
		 }
		geoip {
			 source => "clientip"
		 }
	}
	
	if [iface] =~ /^igb0$/ {
		mutate {
			add_field => ["network", "WAN" ]
	   }
	}

	else if [iface] =~ /^igb1$/ {

		mutate {
			 add_field => ["network", "LAN" ]
		}
	}

	else if [iface] =~ /^igb2$/ {
		mutate {
			 add_field => ["network", "TrustedWiFi" ]
		}
	}

	else if [iface] =~ /^igb3$/ {
		mutate {
			add_field => ["network", "GuestWiFi" ]
		}
	}
	
	#DNS lookup of destination IP
	dns {
		reverse => [ "dest_ip" ]
		add_field => [ "dest_hostname", "%{[dest_ip][1]}" ]
		add_tag => [ "dns_lookup" ]
	}
	
	#DNS lookup will replace "dest_ip" with ["dest_ip", "dest_hostname"], so we use this mutate to remove the hostname from the IP variable
	if ("dns_lookup" in [tags]){
		mutate {
			replace => [ "dest_ip", "%{[dest_ip][0]}" ]
		}
	}

	if !("_grokparsefailure" in [tags]) {
		  mutate {
			remove_field => ["message"]
		  }
	}
  }
}
